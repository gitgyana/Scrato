# config.py
from datetime import datetime
import os

# CSS classes and element identifiers for scraping
PARENT_DIV_CLASS = "category_news_phai_chinh"
NEWS_LIST_DIV_CLASS = "category_news"
NEWS_LIST_UL_TAG = "ul"

NEWS_ITEM_LI_TAG = "li"
TITLE_A_TAG = "a"
TITLE_A_TITLE_ATTR = "title"
TITLE_A_HREF_ATTR = "href"
NEWS_DATE_CLASS = "news_date"

# Classes in detail page
DETAIL_NEWS_DIV_CLASS = "news"
DETAIL_IMAGE1_DIV_CLASS = "fisrst_sc"
DETAIL_IMAGE1_IMG_TAG = "img"
DETAIL_IMAGE2_DIV_CLASS = "Recipepod"

# File size prefix used during file info extraction
FILE_SIZE_PREFIX = "File size:"

# File host providers to filter download links
FILE_PROVIDERS = ["source1", "source2", "source3", "source4"]

# Filtering conditions for titles
TITLE_FILTER_INCLUDE = "[NEW]"
TITLE_FILTER_EXCLUDE = "AD"

# Websites to scrape, with pagination placeholder | PAGENO |
WEBSITE = "https://example.com/news-page-| PAGENO |.html#gsc.tab=0"
WEBSITES = [
    "https://example.com/news-page-| PAGENO |.html#gsc.tab=0",
    "https://example.com/headline-page-| PAGENO |.html#gsc.tab=0",
    # More URLs can be added here
]

# Timestamps for naming and versioning
OUTPUT_DATETIME = datetime.now().strftime("%Y.%m.%d_%H.%M.%S")
REFINE_DT = datetime.now().strftime("%Y%m%d_%H%M%S")

# Scraping/processing filter: stop after this end date
END_DATE = "2025.08"

# SQLite database configuration
DATABASE = 'database.db'
TABLE_NAME = 'table_0'

# Fields used in database and CSV
FIELDNAMES = [
    "date",
    "site",
    "title",
    "href",
    "image1",
    "image2",
    "filename",
    "size",
    "fileurl",
    "process_dt",
]

# Primary key fields for deduplication or constraints
PRIMARY_KEYS = ["date", "filename"]

# Default values for SQL table creation
DEFAULT_FILENAME = f"FILE_{REFINE_DT}"
DEFAULT_DATE = f'"{datetime.now().strftime("%Y.%m.%d")}"'

# SQL CREATE TABLE string
TABLE_HEADER = ', '.join(
    f"{col} TEXT NOT NULL DEFAULT {DEFAULT_FILENAME}" if col == 'filename'
    else f"{col} TEXT NOT NULL DEFAULT {DEFAULT_DATE}" if col == 'date'
    else f"{col} TEXT"
    for col in FIELDNAMES
) + f", PRIMARY KEY ({', '.join(PRIMARY_KEYS)})"

# Path for saving CSV output
formatted_ym = datetime.now().strftime("%Y.%m")
CSV_FILE = os.path.join("Outputs", formatted_ym, f"news_output_{OUTPUT_DATETIME}.csv")

# Directory for logs
LOG_DIR = "logs"

# Data row template (used for inserting into DB or CSV)
ROW_HARDCODE = """
{
    "date": date,
    "site": site,
    "title": title,
    "href": href,
    "image1": image1,
    "image2": image2,
    "filename": filename,
    "size": size,
    "fileurl": fileurl,
    "process_dt": process_dt,
}
"""
